@using SVG_Pie_Chart.Data
<svg style="display:block; margin:auto; vertical-align:central;" height="@height" width="@width" viewBox="0, 0, 2000, 2000">
    @foreach (var p in PieDataToPlot)
    {
        @(RotAngle = RotAngle + (((p.Percent / 100) * 360.0) - 90))
        <path d="@GenerateArc(1000, 1000, 800, p.Percent)" id="@RotAngle" fill="@p.Color" transform="rotate(@RotAngle,1000,1000)"></path>
        @(RotAngle += 90)
    }
</svg>
@code {

    [Parameter]
    public List<PieDataModel> PieData { get; set; }
    [Parameter]
    public int height { get; set; } = 90;
    [Parameter]
    public int width { get; set; } = 200;
    private double RotAngle { get; set; } = 0;
    private List<PieDataModel> PieDataToPlot = new List<PieDataModel>();

    protected override void OnInitialized()
    {

        if (PieData != null)
        {
            PieDataToPlot = PieData;
        }
        base.OnInitialized();
    }

    #region Svg Pie
    private double DegToRad(double AngDeg)
    {
        return (AngDeg * Math.PI) / 180.0;
    }
    struct CartesianPosition
    {
        public double x;
        public double y;
    }
    private string GenerateArc(double cx, double cy, double r, double percent)
    {
        CartesianPosition Cartesian;

        double angledeg = (percent / 100) * 360.0;
        double anglerad = DegToRad(angledeg);
        Cartesian.x = cx + (r * Math.Cos(anglerad));
        Cartesian.y = cy - (r * Math.Sin(anglerad));
        if (Convert.ToInt32(Cartesian.y) == cy)
        {
            Cartesian.y += 1.0;
        }

        if (angledeg > 180)
        {
            return "M " + cx.ToString() + " " + cy.ToString() + " " + (cx + r).ToString() + "," + (cy).ToString() + " A" + r.ToString() + " " + r.ToString() + ", 0, 1, 0, " + Cartesian.x.ToString() + "," + Cartesian.y.ToString() + " ";
        }
        else
        {
            return "M " + cx.ToString() + " " + cy.ToString() + " " + (cx + r).ToString() + "," + (cy).ToString() + " A" + r.ToString() + " " + r.ToString() + ", 0, 0, 0, " + Cartesian.x.ToString() + "," + Cartesian.y.ToString() + " ";
        }
    }
    #endregion
}
